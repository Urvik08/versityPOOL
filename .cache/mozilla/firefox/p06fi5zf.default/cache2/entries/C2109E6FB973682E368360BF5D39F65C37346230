/**
* phpBB3 forum functions
*/

/**
* Window popup
*/
function popup(url, width, height, name)
{
	if (!name)
	{
		name = '_popup';
	}

	window.open(url.replace(/&amp;/g, '&'), name, 'height=' + height + ',resizable=yes,scrollbars=yes, width=' + width);
	return false;
}

/**
* Jump to page
*/
function jumpto()
{
	var page = prompt(jump_page, on_page);

	if (page !== null && !isNaN(page) && page == Math.floor(page) && page > 0)
	{
		if (base_url.indexOf('?') == -1)
		{
			document.location.href = base_url + '?start=' + ((page - 1) * per_page);
		}
		else
		{
			document.location.href = base_url.replace(/&amp;/g, '&') + '&start=' + ((page - 1) * per_page);
		}
	}
}

/**
* Mark/unmark checklist
* id = ID of parent container, name = name prefix, state = state [true/false]
*/
function marklist(id, name, state)
{
	var parent = document.getElementById(id);
	if (!parent)
	{
		eval('parent = document.' + id);
	}

	if (!parent)
	{
		return;
	}

	var rb = parent.getElementsByTagName('input');
	
	for (var r = 0; r < rb.length; r++)
	{	
		if (rb[r].name.substr(0, name.length) == name)
		{
			rb[r].checked = state;
		}
	}
}

/**
* Resize viewable area for attached image or topic review panel (possibly others to come)
* e = element
*/
function viewableArea(e, itself)
{
	if (!e) return;
	if (!itself)
	{
		e = e.parentNode;
	}
	
	if (!e.vaHeight)
	{
		// Store viewable area height before changing style to auto
		e.vaHeight = e.offsetHeight;
		e.vaMaxHeight = e.style.maxHeight;
		e.style.height = 'auto';
		e.style.maxHeight = 'none';
		e.style.overflow = 'visible';
	}
	else
	{
		// Restore viewable area height to the default
		e.style.height = e.vaHeight + 'px';
		e.style.overflow = 'auto';
		e.style.maxHeight = e.vaMaxHeight;
		e.vaHeight = false;
	}
}

/**
* Set display of page element
* s[-1,0,1] = hide,toggle display,show
* type = string: inline, block, inline-block or other CSS "display" type
*/
function dE(n, s, type)
{
	if (!type)
	{
		type = 'block';
	}

	var e = document.getElementById(n);
	if (!s)
	{
		s = (e.style.display == '' || e.style.display == type) ? -1 : 1;
	}
	e.style.display = (s == 1) ? type : 'none';
}

/**
* Alternate display of subPanels
*/
function subPanels(p)
{
	var i, e, t;

	if (typeof(p) == 'string')
	{
		show_panel = p;
	}

	for (i = 0; i < panels.length; i++)
	{
		e = document.getElementById(panels[i]);
		t = document.getElementById(panels[i] + '-tab');

		if (e)
		{
			if (panels[i] == show_panel)
			{
				e.style.display = 'block';
				if (t)
				{
					t.className = 'activetab';
				}
			}
			else
			{
				e.style.display = 'none';
				if (t)
				{
					t.className = '';
				}
			}
		}
	}
}

/**
* Call print preview
*/
function printPage()
{
	if (is_ie)
	{
		printPreview();
	}
	else
	{
		window.print();
	}
}

/**
* Show/hide groups of blocks
* c = CSS style name
* e = checkbox element
* t = toggle dispay state (used to show 'grip-show' image in the profile block when hiding the profiles) 
*/
function displayBlocks(c, e, t)
{
	var s = (e.checked == true) ?  1 : -1;

	if (t)
	{
		s *= -1;
	}

	var divs = document.getElementsByTagName("DIV");

	for (var d = 0; d < divs.length; d++)
	{
		if (divs[d].className.indexOf(c) == 0)
		{
			divs[d].style.display = (s == 1) ? 'none' : 'block';
		}
	}
}

function selectCode(a)
{
	// Get ID of code block
	var e = a.parentNode.parentNode.getElementsByTagName('CODE')[0];

	// Not IE and IE9+
	if (window.getSelection)
	{
		var s = window.getSelection();
		// Safari
		if (s.setBaseAndExtent)
		{
			s.setBaseAndExtent(e, 0, e, e.innerText.length - 1);
		}
		// Firefox and Opera
		else
		{
			// workaround for bug # 42885
			if (window.opera && e.innerHTML.substring(e.innerHTML.length - 4) == '<BR>')
			{
				e.innerHTML = e.innerHTML + '&nbsp;';
			}

			var r = document.createRange();
			r.selectNodeContents(e);
			s.removeAllRanges();
			s.addRange(r);
		}
	}
	// Some older browsers
	else if (document.getSelection)
	{
		var s = document.getSelection();
		var r = document.createRange();
		r.selectNodeContents(e);
		s.removeAllRanges();
		s.addRange(r);
	}
	// IE
	else if (document.selection)
	{
		var r = document.body.createTextRange();
		r.moveToElementText(e);
		r.select();
	}
}

/**
* Patch to expand / collapse code window
**/

function expandCode(aTag,flag)
{
	aTag.parentNode.parentNode.className = flag ? 'codeboxexp' : 'codebox';
}

/**
* Play quicktime file by determining it's width/height
* from the displayed rectangle area
*/
function play_qt_file(obj)
{
	var rectangle = obj.GetRectangle();

	if (rectangle)
	{
		rectangle = rectangle.split(',');
		var x1 = parseInt(rectangle[0]);
		var x2 = parseInt(rectangle[2]);
		var y1 = parseInt(rectangle[1]);
		var y2 = parseInt(rectangle[3]);

		var width = (x1 < 0) ? (x1 * -1) + x2 : x2 - x1;
		var height = (y1 < 0) ? (y1 * -1) + y2 : y2 - y1;
	}
	else
	{
		var width = 200;
		var height = 0;
	}

	obj.width = width;
	obj.height = height + 16;

	obj.SetControllerVisible(true);
	obj.Play();
}

/**
* Check if the nodeName of elem is name
* @author jQuery
*/
function is_node_name(elem, name)
{
	return elem.nodeName && elem.nodeName.toUpperCase() == name.toUpperCase();
}

/**
* Check if elem is in array, return position
* @author jQuery
*/
function is_in_array(elem, array)
{
	for (var i = 0, length = array.length; i < length; i++)
		// === is correct (IE)
		if (array[i] === elem)
			return i;

	return -1;
}

/**
* Find Element, type and class in tree
* Not used, but may come in handy for those not using JQuery
* @author jQuery.find, Meik Sievertsen
*/
function find_in_tree(node, tag, type, class_name)
{
	var result, element, i = 0, length = node.childNodes.length;

	for (element = node.childNodes[0]; i < length; element = node.childNodes[++i])
	{
		if (!element || element.nodeType != 1) continue;

		if ((!tag || is_node_name(element, tag)) && (!type || element.type == type) && (!class_name || is_in_array(class_name, (element.className || element).toString().split(/\s+/)) > -1))
		{
			return element;
		}

		if (element.childNodes.length)
			result = find_in_tree(element, tag, type, class_name);

		if (result) return result;
	}
}

var in_autocomplete = false;
var last_key_entered = '';

/**
* Check event key
*/
function phpbb_check_key(event)
{
	// Keycode is array down or up?
	if (event.keyCode && (event.keyCode == 40 || event.keyCode == 38))
		in_autocomplete = true;

	// Make sure we are not within an "autocompletion" field
	if (in_autocomplete)
	{
		// If return pressed and key changed we reset the autocompletion
		if (!last_key_entered || last_key_entered == event.which)
		{
			in_autocompletion = false;
			return true;
		}
	}

	// Keycode is not return, then return. ;)
	if (event.which != 13)
	{
		last_key_entered = event.which;
		return true;
	}

	return false;
}

/**
* Usually used for onkeypress event, to submit a form on enter
*/
function submit_default_button(event, selector, class_name)
{
	// Add which for key events
	if (!event.which && ((event.charCode || event.charCode === 0) ? event.charCode : event.keyCode))
		event.which = event.charCode || event.keyCode;

	if (phpbb_check_key(event))
		return true;

	var current = selector['parentNode'];

	// Search parent form element
	while (current && (!current.nodeName || current.nodeType != 1 || !is_node_name(current, 'form')) && current != document)
		current = current['parentNode'];

	// Find the input submit button with the class name
	//current = find_in_tree(current, 'input', 'submit', class_name);
	var input_tags = current.getElementsByTagName('input');
	current = false;

	for (var i = 0, element = input_tags[0]; i < input_tags.length; element = input_tags[++i])
	{
		if (element.type == 'submit' && is_in_array(class_name, (element.className || element).toString().split(/\s+/)) > -1)
			current = element;
	}

	if (!current)
		return true;

	// Submit form
	current.focus();
	current.click();
	return false;
}

/**
* Apply onkeypress event for forcing default submit button on ENTER key press
* The jQuery snippet used is based on http://greatwebguy.com/programming/dom/default-html-button-submit-on-enter-with-jquery/
* The non-jQuery code is a mimick of the jQuery code ;)
*/
function apply_onkeypress_event()
{
	// jQuery code in case jQuery is used
	if (jquery_present)
	{
		jQuery('form input[type=text], form input[type=password]').on('keypress', function (e)
		{
			var default_button = jQuery(this).parents('form').find('input[type=submit].default-submit-action');
			
			if (!default_button || default_button.length <= 0)
				return true;

			if (phpbb_check_key(e))
				return true;

			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13))
			{
				default_button.click();
				return false;
			}

			return true;
		});
	
		return;
	}

	var input_tags = document.getElementsByTagName('input');

	for (var i = 0, element = input_tags[0]; i < input_tags.length ; element = input_tags[++i])
	{
		if (element.type == 'text' || element.type == 'password')
		{
			// onkeydown is possible too
			element.onkeypress = function (evt) { submit_default_button((evt || window.event), this, 'default-submit-action'); };
		}
	}
}

/**
* Detect JQuery existance. We currently do not deliver it, but some styles do, so why not benefit from it. ;)
*/
var jquery_present = typeof jQuery == 'function';
à‰ œ¼™      V¤*V¤*<§V»uÎ   D:https://forums.virtualbox.org/styles/prosilver/template/forum_fn.js necko:classified 1 security-info FnhllAKWRHGAlo+ESXykKAAAAAAAAAAAwAAAAAAAAEaphjojH6pBabDSgSnsfLHeAAQAAgAAAAAAAAAAAAAAAAAAAAAB4vFIJp5wRkeyPxAQ9RJGKPqbqVvKO0mKuIl8ec8o/uhmCjImkVxP+7sgiYWmMt8F+O2DZM7ZTG6GukivU8OT5gAAAAAAAAWJMIIFhTCCBG2gAwIBAgIQf6t5X7i3BNSxuqohoJZNrjANBgkqhkiG9w0BAQsFADBoMQswCQYDVQQGEwJVUzEbMBkGA1UEChMST3JhY2xlIENvcnBvcmF0aW9uMR8wHQYDVQQLExZTeW1hbnRlYyBUcnVzdCBOZXR3b3JrMRswGQYDVQQDExJPcmFjbGUgU1NMIENBIC0gRzIwHhcNMTUwOTI1MDAwMDAwWhcNMTYwOTI1MjM1OTU5WjCBlDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFTATBgNVBAcMDFJlZHdvb2QgQ2l0eTEbMBkGA1UECgwST3JhY2xlIENvcnBvcmF0aW9uMR8wHQYDVQQLDBZQcm9kdWN0IERldmVsb3BtZW50IElUMRswGQYDVQQDDBJ3d3cudmlydHVhbGJveC5vcmcwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDjVs3TS8y8IYihBLyk89bHG9pgzXnd/XLORC9rjxgLooSEl6TLOCjnEaPidMMQNQaB+Nzzd9Rx8SIjD8MZxqmqL7jblV5GSl9PVvFRXyGTswwe1FaUn24mbNhAbl+gbzwgmIpRs6ZyyruTZvJj8ECTqmV3siVrcPolDjzzGeqKmFKPoKW8E7Rrb0D0La1IMSMxJu5EvGwToKSgwjtvv2R2tiMGk5LWLUBzF1d6z+0IClBm0kuxM+yb7XgT2HdYrlF/2zOBIWQJfWl3sMe50VPx/QJ1aX9DG8epRwSQ65JT4ZJQbkQHoq/vCh9LVErj+CfRl6L+wCtD7H4kpuz3lEYlAgMBAAGjggH8MIIB+DBbBgNVHREEVDBSghVmb3J1bXMudmlydHVhbGJveC5vcmeCFXVwZGF0ZS52aXJ0dWFsYm94Lm9yZ4IOdmlydHVhbGJveC5vcmeCEnd3dy52aXJ0dWFsYm94Lm9yZzAJBgNVHRMEAjAAMB0GA1UdDgQWBBR/9XiPN4Jv8U/yGUtKpBKoviIAZjAfBgNVHSMEGDAWgBRgjGaRX0nIVR/mtZoMeldlczi0ojAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMDoGA1UdIAQzMDEwLwYGZ4EMAQICMCUwIwYIKwYBBQUHAgEWF2h0dHBzOi8vZC5zeW1jYi5jb20vY3BzMFMGA1UdHwRMMEowSKBGoESGQmh0dHA6Ly9tc3NsLWNybC53cy5zeW1hbnRlYy5jb20vUHJpdmF0ZUNBLzQ0MDUyNTM2OS1SU0EtU0hBMjU2LmNybDCBjQYIKwYBBQUHAQEEgYAwfjAsBggrBgEFBQcwAYYgaHR0cDovL21zc2wtb2NzcC53cy5zeW1hbnRlYy5jb20wTgYIKwYBBQUHMAKGQmh0dHA6Ly9tc3NsLWFpYS53cy5zeW1hbnRlYy5jb20vUHJpdmF0ZUNBLzQ0MDUyNTM2OS1SU0EtU0hBMjU2LmNlcjANBgkqhkiG9w0BAQsFAAOCAQEAFi90547c4glholtdkAnwxvuXW0eA9jBN/yp1GGQoseQVQMcQ4C7emIs5TiOQdp+HewIgMbF/eV2l21hmknS0Iio30RVcxGVAOIFCTzW7GK1vxsvViSS2vMOS7ASc8mf1AjF+y9CeU2xPpiT6dPoeroPK8I/DOBpoLD22NkREOdvHv877TbKrTccg1r7mXHObtyEsboeNsg3WWhbHmIXGWFblXmw+qmXkXdliYN7bSBxf97p9hFCBwFekay84DSS1pc2PXecdZupdP9TMGq/Q4pOkAspt3CEp33am6IQOfS3ozsFdFCuPbpORopDC8AxcaXmxpfrht2A2s8JKkQUtFMATAAMAAAAAAQEAAA== request-method GET response-head HTTP/1.1 200 OK
Date: Sat, 23 Jan 2016 23:39:23 GMT
Server: Oracle-Application-Server-11g
Last-Modified: Thu, 30 Jul 2015 11:38:34 GMT
Etag: "4438d-245c-51c1624b12280"
Accept-Ranges: bytes
Content-Length: 9308
Content-Type: application/x-javascript
Content-Language: en
 uncompressed-len 0   $\